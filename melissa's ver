import pygame
import sys
import random

# Initialize Pygame
pygame.init()

# Game window dimensions
WIDTH, HEIGHT = 400, 600
window = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption('Flappy Bird')

# Game variables
clock = pygame.time.Clock()
gravity = 0.3  # Reduced gravity
bird_movement = 0
bird_flap_height = -8  # Increased flap height
game_active = True
score = 0
high_score = 0
font = pygame.font.Font(None, 36)

# Colors
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
RED = (255, 0, 0)
GREEN = (0, 255, 0)
BLUE = (0, 0, 255)

# Bird dimensions
bird_size = 20
bird_rect = pygame.Rect(100, HEIGHT // 2, bird_size, bird_size)

# Ground dimensions
ground_height = 100
floor_x_pos = 0

# Create pipes
def create_pipe():
    pipe_width = 60
    pipe_gap = 180  # Increased gap between pipes
    random_pipe_pos = random.randint(150, HEIGHT - ground_height - pipe_gap - 150)
    bottom_pipe = pygame.Rect(WIDTH, random_pipe_pos + pipe_gap, pipe_width, HEIGHT - random_pipe_pos - pipe_gap - ground_height)
    top_pipe = pygame.Rect(WIDTH, 0, pipe_width, random_pipe_pos)
    return bottom_pipe, top_pipe

def move_pipes(pipes):
    for pipe in pipes:
        pipe.x -= 2  # Slowed down pipe movement
    return pipes

def draw_pipes(pipes):
    for pipe in pipes:
        pygame.draw.rect(window, BLUE, pipe)

def check_collision(pipes):
    for pipe in pipes:
        if bird_rect.colliderect(pipe):
            return False

    if bird_rect.top <= 0 or bird_rect.bottom >= HEIGHT - ground_height:
        return False

    return True

def draw_floor():
    pygame.draw.rect(window, GREEN, (floor_x_pos, HEIGHT - ground_height, WIDTH, ground_height))

def score_display(game_state):
    if game_state == 'main_game':
        score_surface = font.render(f'Score: {int(score)}', True, WHITE)
        window.blit(score_surface, (WIDTH // 2 - score_surface.get_width() // 2, 50))
    if game_state == 'game_over':
        score_surface = font.render(f'Score: {int(score)}', True, WHITE)
        window.blit(score_surface, (WIDTH // 2 - score_surface.get_width() // 2, 50))

        high_score_surface = font.render(f'High Score: {int(high_score)}', True, WHITE)
        window.blit(high_score_surface, (WIDTH // 2 - high_score_surface.get_width() // 2, HEIGHT // 2))

def update_score(score, high_score):
    if score > high_score:
        high_score = score
    return high_score

# Main game loop
pipe_list = []
SPAWNPIPE = pygame.USEREVENT
pygame.time.set_timer(SPAWNPIPE, 2000)  # Increased spawn interval

while True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_SPACE and game_active:
                bird_movement = bird_flap_height
            if event.key == pygame.K_SPACE and not game_active:
                game_active = True
                pipe_list.clear()
                bird_rect.centery = HEIGHT // 2
                bird_movement = 0
                score = 0

        if event.type == SPAWNPIPE:
            pipe_list.extend(create_pipe())

    window.fill(BLACK)  # Fill the background with black

    if game_active:
        bird_movement += gravity
        bird_rect.centery += bird_movement
        pygame.draw.rect(window, RED, bird_rect)  # Draw bird

        game_active = check_collision(pipe_list)

        pipe_list = move_pipes(pipe_list)
        draw_pipes(pipe_list)

        score += 0.01
        score_display('main_game')
    else:
        high_score = update_score(score, high_score)
        score_display('game_over')

    floor_x_pos -= 1
    draw_floor()
    if floor_x_pos <= -WIDTH:
        floor_x_pos = 0

    pygame.display.update()
    clock.tick(120)
